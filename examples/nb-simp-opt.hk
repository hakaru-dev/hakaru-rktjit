fn topic_prior array(prob):
 fn word_prior array(prob):
  fn z array(nat):
   fn w array(nat):
    fn doc array(nat):
     fn docUpdate nat:
         topic_prior_size = size(topic_prior)
         topic_prior_sum = summate i13 from 0 to topic_prior_size: topic_prior[i13]
	     word_prior_size = size(word_prior)
         word_prior_sum  = summate i13 from 0 to word_prior_size: word_prior[i13]
         count_z = nat2prob(summate i13 from 0 to size(z):
                              (match (i13 == docUpdate):
                                true: 0
                                false:
                                 (match (z[i13] < 0):
                                   true: 0
                                   false: 1)))
         (array zNew8 of topic_prior_size:
                             count_z_znew = summate i13 from 0 to size(z):
                                             (match (i13 == docUpdate):
                                               true: 0
                                               false:
                                                (match (zNew8 == z[i13]):
                                                  true: 1
                                                  false: 0))
                             inner_product = product i from 0 to topic_prior_size:
                               upper_bound = summate i13 from 0 to size(w):
                                                      (match (docUpdate == doc[i13]):
                                                        true:
                                                         (match (not((w[i13] < 0)) &&
                                                                 (i == zNew8)):
                                                           true: 1
                                                           false: 0)
                                                        false: 0)
                               count_doc_entries = nat2prob(summate i13 from 0 to size(w):
                                                   (match (doc[i13] == docUpdate):
                                                     true: 0
                                                     false:
                                                      (match (not((w[i13] < 0)) && (i == z[doc[i13]])):
                                                        true: 1
                                                        false: 0)))
                               partial_sum = count_doc_entries + word_prior_sum
                               product i18 from 0 to upper_bound:
                                (partial_sum + nat2prob(i18))
                             (product i from 0 to topic_prior_size:
                               product i18 from 0 to word_prior_size:
                                inner_sum = summate i13 from 0 to size(w):
                                                (match (doc[i13] == docUpdate):
                                                  true: 0
                                                  false:
                                                   (match ((i == z[doc[i13]]) && (i18 == w[i13])):
                                                     true: 1
                                                     false: 0))
                                product j from 0 to summate i13 from 0 to size(w):
                                                     (match (docUpdate == doc[i13]):
                                                       true:
                                                        (match ((i == zNew8) && (i18 == w[i13])):
                                                          true: 1
                                                          false: 0)
                                                       false: 0):
                                 (nat2prob(inner_sum)
                                   +
                                  nat2prob(j)
                                   +
                                  word_prior[i18])
                               *
                              (nat2prob(count_z_znew)
                                +
                               topic_prior[zNew8])
                               /
                              (count_z + topic_prior_sum)
                               /
                              inner_product))
