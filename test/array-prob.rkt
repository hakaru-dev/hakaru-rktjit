#lang racket
(require ffi/unsafe)
(require sham/jit)
(require rackunit)
(require "../private/jit.rkt")
(require "../private/utils.rkt")
(require "../private/jit-utils.rkt")
(require "example-vectors.rkt")

(define src (read-file "hkr/array-prob.hkr"))
(define mod-env (compile-src src))
(hakaru-defines mod-env)
(define main (jit-get-function 'main mod-env))

(define (get-argument i)
  (vector-ref (current-command-line-arguments) i))

(define topic-prior (make-c-array-prob (replicate-vector (string->number (get-argument 0)) 1.0)))
(define word-prior (make-c-array-prob (replicate-vector (string->number (get-argument 1)) 1.0)))
(define v (make-c-array-nat (read-vector-from-csv (get-argument 2))))
(define words (make-c-array-nat (read-vector-from-csv (get-argument 3))))
(define docs (make-c-array-nat (read-vector-from-csv (get-argument 4))))
(define docUpdate (string->number (get-argument 5)))
(define result-raw (time (main topic-prior word-prior v words docs docUpdate)))
(define result-vector (cblock->vector (get-array-prob result-raw) prob-type (size-array-prob result-raw)))
(write-vector-to-csv result-vector)
(pretty-display result-vector)
