applying-pass: reduce-curry
datum: k true, v (inl done), typ: bool
datum: k false, v (inr (inl done)), typ: bool
applying-pass: parse-sexp
dirac: t: (measure bool), tval: bool
dirac: t: (measure bool), tval: bool
superpose: t: (measure bool)
make-switch: (bool bool)extract-pair: t: (measure bool), tst: x18 : (pair (array bool) (array bool)), 
brs: (((pair var var) (/ bi3 -> (/ bi4 -> (elets ((s2 (superpose-categorical (* (beta (+ (nat2prob (summate (si13 0 n) (if (index bi3 si13) 0 1))) (nat2prob (summate (si14 0 n) (if (index bi4 si14) 0 1))) 1) (+ (nat2prob (summate (si15 0 n) (if (index bi3 si15) 1 0))) (nat2prob (summate (si16 0 n) (if (index bi4 si16) 1 0))) 1)) (/ 1 16)) (* (beta (+ (nat2prob (summate (si9 0 n) (if (index bi3 si9) 0 1))) 1) (+ (nat2prob (summate (si10 0 n) (if (index bi3 si10) 1 0))) 1)) (beta (+ (nat2prob (summate (si11 0 n) (if (index bi4 si11) 0 1))) 1) (+ (nat2prob (summate (si12 0 n) (if (index bi4 si12) 1 0))) 1)) (/ 1 16))))) <svoid> (if (== s2 1) 1 (if (== s2 0) 0 0)))))))
	 bi3	: (array bool)
	 bi4	: (array bool)
	 body	: (elets ((s2 (superpose-categorical (* (beta (+ (nat2prob (summate (si13 0 n) (if (index bi3 si13) 0 1))) (nat2prob (summate (si14 0 n) (if (index bi4 si14) 0 1))) 1) (+ (nat2prob (summate (si15 0 n) (if (index bi3 si15) 1 0))) (nat2prob (summate (si16 0 n) (if (index bi4 si16) 1 0))) 1)) (/ 1 16)) (* (beta (+ (nat2prob (summate (si9 0 n) (if (index bi3 si9) 0 1))) 1) (+ (nat2prob (summate (si10 0 n) (if (index bi3 si10) 1 0))) 1)) (beta (+ (nat2prob (summate (si11 0 n) (if (index bi4 si11) 0 1))) 1) (+ (nat2prob (summate (si12 0 n) (if (index bi4 si12) 1 0))) 1)) (/ 1 16))))) <svoid> (if (== s2 1) 1 (if (== s2 0) 0 0)))
types: car: (array bool), cdr: (array bool)
applying-pass: initial-simplifications
applying-pass: flatten-anf
normal-var-map: (s2)
wrapping-normals: ((s2 (superpose-categorical (* (beta (+ (nat2prob sm25) (nat2prob sm26) 1) (+ (nat2prob sm27) (nat2prob sm28) 1)) (/ 1 16)) (* (beta (+ (nat2prob sm29) 1) (+ (nat2prob sm30) 1)) (beta (+ (nat2prob sm31) 1) (+ (nat2prob sm32) 1)) (/ 1 16))) (measure bool) (measure bool) (measure bool)))
loop-var: (sm32 sm31 sm28 sm29 sm25 sm27 sm30 sm26) groups: ((sm32 sm31 sm28 sm29 sm25 sm27 sm30 sm26))
normal-var-map: (bi3 bi4)
wrapping-normals: ((bi3 (car x18) (array bool) (array bool) (array bool)) (bi4 (cdr x18) (array bool) (array bool) (array bool)))
applying-pass: combine-loops
replacing-immutable: si14 <- ci2
replacing-immutable: si10 <- ci2
replacing-immutable: si15 <- ci2
replacing-immutable: si13 <- ci2
replacing-immutable: si9 <- ci2
replacing-immutable: si16 <- ci2
replacing-immutable: si11 <- ci2
replacing-immutable: si12 <- ci2
applying-pass: later-simplifications
applying-pass: to-stmt
((main
  (function
   (n x18)
   (se
    <svoid>
    (elets
     ((bi4 (cdr x18)) (bi3 (car x18)))
     (block-stmt
      <svoid>
      (se
       <svoid>
       (elets
        ((sm32 0)
         (sm31 0)
         (sm28 0)
         (sm29 0)
         (sm25 0)
         (sm27 0)
         (sm30 0)
         (sm26 0))
        (block-stmt
         (for-stmt
          (ci2 0 n)
          (block-stmt
           (se
            <svoid>
            (elets
             ()
             (if-stmt
              (index bi4 ci2)
              (set! sm26 (+ sm26 0))
              (set! sm26 (+ sm26 1)))
             0))
           (se
            <svoid>
            (elets
             ()
             (if-stmt
              (index bi3 ci2)
              (set! sm30 (+ sm30 1))
              (set! sm30 (+ sm30 0)))
             0))
           (se
            <svoid>
            (elets
             ()
             (if-stmt
              (index bi3 ci2)
              (set! sm27 (+ sm27 1))
              (set! sm27 (+ sm27 0)))
             0))
           (se
            <svoid>
            (elets
             ()
             (if-stmt
              (index bi3 ci2)
              (set! sm25 (+ sm25 0))
              (set! sm25 (+ sm25 1)))
             0))
           (se
            <svoid>
            (elets
             ()
             (if-stmt
              (index bi3 ci2)
              (set! sm29 (+ sm29 0))
              (set! sm29 (+ sm29 1)))
             0))
           (se
            <svoid>
            (elets
             ()
             (if-stmt
              (index bi4 ci2)
              (set! sm28 (+ sm28 1))
              (set! sm28 (+ sm28 0)))
             0))
           (se
            <svoid>
            (elets
             ()
             (if-stmt
              (index bi4 ci2)
              (set! sm31 (+ sm31 0))
              (set! sm31 (+ sm31 1)))
             0))
           (se
            <svoid>
            (elets
             ()
             (if-stmt
              (index bi4 ci2)
              (set! sm32 (+ sm32 1))
              (set! sm32 (+ sm32 0)))
             0))))
         (se
          <svoid>
          (elets
           ((s2
             (superpose-categorical
              (*
               (beta
                (+ (nat2prob sm25) (nat2prob sm26) 1)
                (+ (nat2prob sm27) (nat2prob sm28) 1))
               (/ 1 16))
              (*
               (beta (+ (nat2prob sm29) 1) (+ (nat2prob sm30) 1))
               (beta (+ (nat2prob sm31) 1) (+ (nat2prob sm32) 1))
               (/ 1 16)))))
           (block-stmt
            <svoid>
            (if-stmt
             (== s2 1)
             (return 1)
             (if-stmt (== s2 0) (return 0) (return 0))))
           0)))
        0)))
     0)))))
expanding-function: prog
	arg-types: (nat (pair (array bool) (array bool))), ret-type: (measure bool)
stmt-return: 1, type: bool
stmt-return: 0, type: bool
stmt-return: 0, type: (measure bool)
applying-pass: expand-to-lc
(define (prog n x18)
  (let (bi4 (cdr$pair<array<bool>*.array<bool>*> x18))
    (bi3 (car$pair<array<bool>*.array<bool>*> x18))
    svoid
    (let (sm32 (uint 0 nat))
      (sm31 (uint 0 nat))
      (sm28 (uint 0 nat))
      (sm29 (uint 0 nat))
      (sm25 (uint 0 nat))
      (sm27 (uint 0 nat))
      (sm30 (uint 0 nat))
      (sm26 (uint 0 nat))
      (let (ci2 (uint 0 nat))
        (while
         (icmp-ult ci2 n)
         (let (if
               (get-index$array<bool> bi4 ci2)
               (set! sm26 (add-nuw sm26 (uint 0 nat)))
               (set! sm26 (add-nuw sm26 (uint 1 nat))))
           (uint 0 nat))
         (let (if
               (get-index$array<bool> bi3 ci2)
               (set! sm30 (add-nuw sm30 (uint 1 nat)))
               (set! sm30 (add-nuw sm30 (uint 0 nat))))
           (uint 0 nat))
         (let (if
               (get-index$array<bool> bi3 ci2)
               (set! sm27 (add-nuw sm27 (uint 1 nat)))
               (set! sm27 (add-nuw sm27 (uint 0 nat))))
           (uint 0 nat))
         (let (if
               (get-index$array<bool> bi3 ci2)
               (set! sm25 (add-nuw sm25 (uint 0 nat)))
               (set! sm25 (add-nuw sm25 (uint 1 nat))))
           (uint 0 nat))
         (let (if
               (get-index$array<bool> bi3 ci2)
               (set! sm29 (add-nuw sm29 (uint 0 nat)))
               (set! sm29 (add-nuw sm29 (uint 1 nat))))
           (uint 0 nat))
         (let (if
               (get-index$array<bool> bi4 ci2)
               (set! sm28 (add-nuw sm28 (uint 1 nat)))
               (set! sm28 (add-nuw sm28 (uint 0 nat))))
           (uint 0 nat))
         (let (if
               (get-index$array<bool> bi4 ci2)
               (set! sm31 (add-nuw sm31 (uint 0 nat)))
               (set! sm31 (add-nuw sm31 (uint 1 nat))))
           (uint 0 nat))
         (let (if
               (get-index$array<bool> bi4 ci2)
               (set! sm32 (add-nuw sm32 (uint 1 nat)))
               (set! sm32 (add-nuw sm32 (uint 0 nat))))
           (uint 0 nat))
         (set! ci2 (add-nuw ci2 (uint 1 nat)))))
      (let (s2
            (categorical-2
             (fadd
              (beta
               (add$3&prob
                (nat2prob sm25)
                (nat2prob sm26)
                (real2prob (float 1.0 real)))
               (add$3&prob
                (nat2prob sm27)
                (nat2prob sm28)
                (real2prob (float 1.0 real))))
              (recip-nat->prob (uint 1 nat) (uint 16 nat)))
             (fadd
              (beta
               (add$2&prob (nat2prob sm29) (real2prob (float 1.0 real)))
               (add$2&prob (nat2prob sm30) (real2prob (float 1.0 real))))
              (beta
               (add$2&prob (nat2prob sm31) (real2prob (float 1.0 real)))
               (add$2&prob (nat2prob sm32) (real2prob (float 1.0 real))))
              (recip-nat->prob (uint 1 nat) (uint 16 nat)))))
        svoid
        (if (icmp-eq s2 (uint 1 bool))
          (return (uint 1 bool))
          (if (icmp-eq s2 (uint 0 bool))
            (return (uint 0 bool))
            (return (uint 0 bool))))
        (uint 0 nat))
      (uint 0 nat))
    (uint 0 nat)))
registering def: nat
registering def: int
registering def: real
registering def: prob
registering def: bool
registering def: nat*
registering def: int*
registering def: real*
registering def: prob*
registering def: nat2prob
registering def: nat2real
registering def: nat2int
registering def: int2nat
registering def: int2real
registering def: prob2real
registering def: real2prob
registering def: recip-nat
registering def: recip-real
registering def: recip-prob
registering def: root-prob-nat
registering def: exp-real2prob
registering def: fdiv-nat
registering def: natpow
registering def: array<nat>
registering def: array<nat>*
registering def: make$array<nat>
registering def: new-sized$array<nat>
registering def: empty$array<nat>
registering def: get-size$array<nat>
registering def: get-data$array<nat>
registering def: get-index$array<nat>
registering def: set-index!$array<nat>
registering def: array<real>
registering def: array<real>*
registering def: make$array<real>
registering def: new-sized$array<real>
registering def: empty$array<real>
registering def: get-size$array<real>
registering def: get-data$array<real>
registering def: get-index$array<real>
registering def: set-index!$array<real>
registering def: array<prob>
registering def: array<prob>*
registering def: make$array<prob>
registering def: new-sized$array<prob>
registering def: empty$array<prob>
registering def: get-size$array<prob>
registering def: get-data$array<prob>
registering def: get-index$array<prob>
registering def: set-index!$array<prob>
registering def: gsl-rng
registering def: init-rng
registering def: uniform
registering def: normal
registering def: beta
registering def: gamma
registering def: categorical
registering def: bool*
registering def: array<bool>
registering def: array<bool>*
registering def: pair<array<bool>*.array<bool>*>
registering def: make$pair<array<bool>*.array<bool>*>
registering def: car$pair<array<bool>*.array<bool>*>
registering def: cdr$pair<array<bool>*.array<bool>*>
registering def: set-car!$pair<array<bool>*.array<bool>*>
registering def: set-cdr!$pair<array<bool>*.array<bool>*>
registering def: make$array<bool>
registering def: new-sized$array<bool>
registering def: empty$array<bool>
registering def: get-size$array<bool>
registering def: get-data$array<bool>
registering def: get-index$array<bool>
registering def: set-index!$array<bool>
registering def: pair<array<bool>*.array<bool>*>*
registering def: categorical-2
registering def: add$3&prob
registering def: recip-nat->prob
registering def: add$2&prob
registering def: prog
compiling-function nat2prob
compiling-function nat2real
compiling-function nat2int
compiling-function int2nat
compiling-function int2real
compiling-function prob2real
compiling-function real2prob
compiling-function recip-nat
compiling-function recip-real
compiling-function recip-prob
compiling-function root-prob-nat
compiling-function exp-real2prob
compiling-function fdiv-nat
compiling-function natpow
compiling-function make$array<nat>
compiling-function new-sized$array<nat>
compiling-function empty$array<nat>
compiling-function get-size$array<nat>
compiling-function get-data$array<nat>
compiling-function get-index$array<nat>
compiling-function set-index!$array<nat>
compiling-function make$array<real>
compiling-function new-sized$array<real>
compiling-function empty$array<real>
compiling-function get-size$array<real>
compiling-function get-data$array<real>
compiling-function get-index$array<real>
compiling-function set-index!$array<real>
compiling-function make$array<prob>
compiling-function new-sized$array<prob>
compiling-function empty$array<prob>
compiling-function get-size$array<prob>
compiling-function get-data$array<prob>
compiling-function get-index$array<prob>
compiling-function set-index!$array<prob>
compiling-function init-rng
compiling-function uniform
compiling-function normal
compiling-function beta
compiling-function gamma
compiling-function categorical
compiling-function make$pair<array<bool>*.array<bool>*>
compiling-function car$pair<array<bool>*.array<bool>*>
compiling-function cdr$pair<array<bool>*.array<bool>*>
compiling-function set-car!$pair<array<bool>*.array<bool>*>
compiling-function set-cdr!$pair<array<bool>*.array<bool>*>
compiling-function make$array<bool>
compiling-function new-sized$array<bool>
compiling-function empty$array<bool>
compiling-function get-size$array<bool>
compiling-function get-data$array<bool>
compiling-function get-index$array<bool>
compiling-function set-index!$array<bool>
compiling-function categorical-2
compiling-function add$3&prob
compiling-function recip-nat->prob
compiling-function add$2&prob
compiling-function prog
